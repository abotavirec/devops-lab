# syntax=docker.io/docker/dockerfile:1

# ---------- Base ----------
FROM node:20-alpine AS base

# ---------- Deps (install) ----------
FROM base AS deps
# libc6-compat is often needed by native modules on Alpine
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy lockfiles (whichever you use) and npm config if present
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

# Clean, reproducible install
# - Uses npm if package-lock.json exists, otherwise falls back to npm i (keeps it simple)
RUN if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi

# ---------- Builder (compile Next.js) ----------
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Disable Next telemetry during build
ENV NEXT_TELEMETRY_DISABLED=1

# Your package.json should have "build:docker": "next build"
# If not, replace the next line with: RUN npm run build
RUN npm run build:docker

# ---------- Runtime (copy standalone output) ----------
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs \
 && adduser  --system --uid 1001 nextjs

# Static assets
COPY --from=builder /app/public ./public

# Standalone output produced by `next build` with output tracing
# https://nextjs.org/docs/app/building-your-application/deploying/standalone
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

# Match your Kubernetes manifest (Service targets 80)
EXPOSE 80
ENV PORT=80
ENV HOSTNAME=0.0.0.0

# `server.js` is generated by Next.js standalone output
CMD ["node", "server.js"]

