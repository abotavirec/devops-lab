# No CI trigger; run manually from Azure DevOps and provide the image tag
trigger: none

# ---------- Runtime parameters ----------
parameters:
  - name: imageRepository
    displayName: Image repository (in ACR)
    type: string
    default: virecintelligencevirecwebapp

  - name: imageTag
    displayName: Image tag to deploy (e.g., commit SHA or 'latest')
    type: string
    default: latest

  # Optional: apply a manifest if you want the pipeline to kubectl apply as well
  - name: applyManifest
    displayName: Also apply a Kubernetes manifest (optional)
    type: boolean
    default: false

  - name: manifestPath
    displayName: Manifest path (used only if applyManifest = true)
    type: string
    default: k8s/deployment.yaml

# ---------- Static variables ----------
variables:
  # ACR
  ACR_LOGIN_SERVER: 'crwebdevcac01.azurecr.io'
  # AKS deployment details
  K8S_NAMESPACE: 'default'
  K8S_DEPLOYMENT: 'virec-web-app'
  CONTAINER_NAME: 'main'
  # Service connection
  SC_AKS: 'sc-aks-web-dev-cac-01'

stages:
  - stage: Deploy_AKS
    displayName: Deploy pre-built image to AKS
    jobs:
      - job: Deploy
        displayName: Rollout $(K8S_DEPLOYMENT) to ${{ parameters.imageRepository }}:${{ parameters.imageTag }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Optional "apply" if you want to manage the manifest via this pipeline
          - task: KubernetesManifest@1
            displayName: 'Apply manifests (optional)'
            condition: and(succeeded(), eq('${{ parameters.applyManifest }}', 'true'))
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(SC_AKS)'
              namespace: '$(K8S_NAMESPACE)'
              manifests: |
                ${{ parameters.manifestPath }}
              containers: |
                $(ACR_LOGIN_SERVER)/${{ parameters.imageRepository }}:${{ parameters.imageTag }}

          # Always set the image on the existing Deployment to force a rollout
          - task: Kubernetes@1
            displayName: 'kubectl set image on $(K8S_DEPLOYMENT)'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(SC_AKS)'
              namespace: '$(K8S_NAMESPACE)'
              command: 'set'
              arguments: >
                image deployment/$(K8S_DEPLOYMENT)
                $(CONTAINER_NAME)=$(ACR_LOGIN_SERVER)/${{ parameters.imageRepository }}:${{ parameters.imageTag }}

          - task: Kubernetes@1
            displayName: 'kubectl rollout status'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(SC_AKS)'
              namespace: '$(K8S_NAMESPACE)'
              command: 'rollout'
              arguments: 'status deployment/$(K8S_DEPLOYMENT) --timeout=180s'
