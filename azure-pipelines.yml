# ------------------- TRIGGERS -------------------
trigger:
  branches:
    include: [ main ]
pr:
  branches:
    include: [ main ]

# ----------------- PARAMETERS -------------------
parameters:
  - name: imageRepository
    type: string
    default: 'virecintelligencevirecwebapp'  # your ACR repository name

  - name: imageTag
    type: string
    default: 'latest'  # set the image tag you want to deploy (e.g., a commit SHA)

  - name: manifestPath
    type: string
    default: 'k8s/deployment.yaml'  # path to your Kubernetes deployment manifest

  - name: applyManifest
    type: boolean
    default: true

# ----------------- VARIABLES --------------------
variables:
  ACR_LOGIN_SERVER: 'crwebdevcac01.azurecr.io'
  K8S_NAMESPACE: 'default'
  K8S_DEPLOYMENT: 'virec-web-app'
  CONTAINER_NAME: 'main'
  SC_AKS: 'sc-aks-web-dev-cac-01'  # Kubernetes service connection

# =================== STAGES =====================
stages:

- stage: Deploy
  displayName: Deploy to AKS using prebuilt image
  jobs:
    - job: DeployAKS
      displayName: Deploy to AKS
      pool:
        vmImage: 'ubuntu-latest'
      steps:

        - bash: |
            set -euo pipefail
            IMAGE="$(ACR_LOGIN_SERVER)/${{ parameters.imageRepository }}:${{ parameters.imageTag }}"
            echo "Using image: $IMAGE"
            echo "##vso[task.setvariable variable=DEPLOY_IMAGE]$IMAGE"
          displayName: 'Set DEPLOY_IMAGE variable'

        - task: Kubernetes@1
          displayName: 'Check RBAC: can patch deployment'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: custom
            arguments: 'auth can-i patch deployment -n $(K8S_NAMESPACE)'

        - task: KubernetesManifest@1
          displayName: 'Apply manifest (if enabled)'
          condition: and(succeeded(), eq(${{ parameters.applyManifest }}, true))
          inputs:
            action: 'deploy'
            kubernetesServiceConnection: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            manifests: |
              ${{ parameters.manifestPath }}
            containers: |
              $(DEPLOY_IMAGE)
            rolloutStatusTimeout: '300'

        - task: Kubernetes@1
          displayName: 'Force set image on deployment (safety net)'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: set
            arguments: >
              image deployment/$(K8S_DEPLOYMENT)
              $(CONTAINER_NAME)=$(DEPLOY_IMAGE)

        - task: Kubernetes@1
          displayName: 'Wait for rollout'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: rollout
            arguments: 'status deployment/$(K8S_DEPLOYMENT) --timeout=600s'

        - task: Kubernetes@1
          displayName: 'Diagnostics (on failure)'
          condition: failed()
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: custom
            arguments: >
              bash -c "
                kubectl describe deploy/$(K8S_DEPLOYMENT);
                kubectl get pods -l app=virec-web-app -o wide;
                kubectl describe pod $(kubectl get pods -l app=virec-web-app -o jsonpath='{.items[0].metadata.name}' || true);
                kubectl get events --sort-by=.metadata.creationTimestamp | tail -n 50