trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - '**/*'

# ==== Variables (adjust if needed) ====
variables:
  ACR_LOGIN_SERVER: 'crwebdevcac01.azurecr.io'
  IMAGE_REPOSITORY: 'virecintelligencevirecwebapp'
  CONTAINER_NAME: 'main'
  K8S_NAMESPACE: 'default'
  K8S_DEPLOYMENT: 'virec-web-app'

stages:
# ==================== BUILD & PUSH ====================
  - stage: Build_Push
    displayName: Build & Push image to ACR
    jobs:
      - job: Build
        displayName: Docker build & push
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              command: login
              containerRegistry: 'sc-acr-crwebdevcac01'   # ACR service connection

          - task: Docker@2
            displayName: 'Build image'
            inputs:
              command: build
              repository: '$(IMAGE_REPOSITORY)'
              dockerfile: '**/Dockerfile'
              containerRegistry: 'sc-acr-crwebdevcac01'
              tags: |
                $(Build.SourceVersion)
                latest

          - task: Docker@2
            displayName: 'Push image'
            inputs:
              command: push
              repository: '$(IMAGE_REPOSITORY)'
              containerRegistry: 'sc-acr-crwebdevcac01'
              tags: |
                $(Build.SourceVersion)
                latest

# ==================== DEPLOY TO AKS ====================
  - stage: Deploy_AKS
    displayName: Deploy to AKS
    dependsOn: Build_Push
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: Apply manifests & roll out
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Safe idempotent deploy: applies manifests and substitutes the image tag
          - task: KubernetesManifest@1
            displayName: 'Deploy manifests (with image override)'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'sc-aks-web-dev-cac-01'   # AKS service connection
              namespace: '$(K8S_NAMESPACE)'
              manifests: |
                k8s/deployment.yaml
              containers: |
                $(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY):$(Build.SourceVersion)

          # (Optional) Explicitly set image on the deployment to ensure a rollout
          - task: Kubernetes@1
            displayName: 'kubectl set image'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'sc-aks-web-dev-cac-01'
              namespace: '$(K8S_NAMESPACE)'
              command: 'set'
              arguments: >
                image deployment/$(K8S_DEPLOYMENT)
                $(CONTAINER_NAME)=$(ACR_LOGIN_SERVER)/$(IMAGE_REPOSITORY):$(Build.SourceVersion)

          - task: Kubernetes@1
            displayName: 'kubectl rollout status'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'sc-aks-web-dev-cac-01'
              namespace: '$(K8S_NAMESPACE)'
              command: 'rollout'
              arguments: 'status deployment/$(K8S_DEPLOYMENT) --timeout=180s'
