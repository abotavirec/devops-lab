# ------------------- TRIGGERS -------------------
trigger:
  branches:
    include: [ main ]
pr:
  branches:
    include: [ main ]

# ----------------- PARAMETERS -------------------
parameters:
  - name: imageRepository
    type: string
    default: 'virecintelligencevirecwebapp'  # your ACR repository name

  - name: imageTag
    type: string
    default: 'latest'  # e.g., a commit SHA or 'latest'

  - name: manifestPath
    type: string
    default: 'k8s/deployment.yaml'  # path to your Kubernetes deployment manifest

  - name: applyManifest
    type: boolean
    default: true

# ----------------- VARIABLES --------------------
variables:
  ACR_LOGIN_SERVER: 'crwebdevcac01.azurecr.io'
  K8S_NAMESPACE: 'default'
  K8S_DEPLOYMENT: 'virec-web-app'
  CONTAINER_NAME: 'main'
  SC_AKS: 'sc-aks-web-dev-cac-01'  # Kubernetes service connection

# =================== STAGES =====================
stages:
- stage: Deploy
  displayName: Deploy to AKS using prebuilt image
  jobs:
    - job: DeployAKS
      displayName: Deploy to AKS
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - bash: |
            set -euo pipefail
            IMAGE="$(ACR_LOGIN_SERVER)/${{ parameters.imageRepository }}:${{ parameters.imageTag }}"
            echo "Using image: $IMAGE"
            echo "##vso[task.setvariable variable=DEPLOY_IMAGE]$IMAGE"
          displayName: 'Set DEPLOY_IMAGE variable'

        # RBAC check - FIXED: use 'auth' (valid kubectl subcommand)
        - task: Kubernetes@1
          displayName: 'Check RBAC: can patch deployment'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: auth
            arguments: 'can-i patch deployment -n $(K8S_NAMESPACE)'

        # Apply manifest and inject image
        - task: KubernetesManifest@1
          displayName: 'Apply manifest (if enabled)'
          condition: and(succeeded(), eq(${{ parameters.applyManifest }}, true))
          inputs:
            action: 'deploy'
            kubernetesServiceConnection: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            manifests: |
              ${{ parameters.manifestPath }}
            containers: |
              $(DEPLOY_IMAGE)
            rolloutStatusTimeout: '300'

        # Safety net: ensure the image is set on the Deployment (idempotent)
        - task: Kubernetes@1
          displayName: 'Force set image on deployment'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: set
            arguments: >
              image deployment/$(K8S_DEPLOYMENT)
              $(CONTAINER_NAME)=$(DEPLOY_IMAGE)

        # Wait for rollout to complete
        - task: Kubernetes@1
          displayName: 'Wait for rollout'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: '$(SC_AKS)'
            namespace: '$(K8S_NAMESPACE)'
            command: rollout
            arguments: 'status deployment/$(K8S_DEPLOYMENT) --timeout=600s'

        # Diagnostics on failure - FIXED: run multiple commands via Bash
        - task: Bash@3
          displayName: 'Diagnostics (on failure)'
          condition: failed()
          inputs:
            targetType: inline
            script: |
              set -x
              kubectl describe deploy/$(K8S_DEPLOYMENT) -n $(K8S_NAMESPACE)
              kubectl get pods -l app=virec-web-app -n $(K8S_NAMESPACE) -o wide || true
              POD="$(kubectl get pods -l app=virec-web-app -n $(K8S_NAMESPACE) -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
              if [ -n "$POD" ]; then
                kubectl describe pod "$POD" -n $(K8S_NAMESPACE) || true
                kubectl logs "$POD" -n $(K8S_NAMESPACE) --tail=200 || true
              fi
              kubectl get events -n $(K8S_NAMESPACE) --sort-by=.metadata.creationTimestamp | tail -n 50 || true
